4/5/24:
priority:
- tlb lockdown prototype for nops
- ensure cloaker does not utilize split TLB
- research cache eviction policty options and how sets are organized on cortex a8

4/7/24:
priority:
- allocate pages
- itlb, dtlb lockdown
- mov badca11, nop


TODO transcribed 4/13/24:
- test with -O0 compiler flag, is angr being overzealous ?
- test with not replacing pgtable after swap
- FIX ASID issue, mark page as global



4/19/24:
THE ISSUE IS IN THE WRITE PROTECTION !!
code 0x80f is the write protect violation code
check:
- page alignment on page to ptep ?
- write protect bit flip code correct ?



4/25/24:
- intra dms, inline data so we can do a ldr into pc without clobbering a reg, no need to be within 32MB

```
    b end
start:
    0xdeadbeef @addr
end:
    ldr pc =start
```

4/28/24:
shellcode:
```
push {r0}
mov32 r0, __handler_dispatch abs
bx r0

pop {r0}
..
sub         sp, sp, #PT_REGS_SIZE
stmia	    sp,     {r0 - lr}

```


5/3/24
- finish lowmem syscall hook + hiding
    - hook sys_kill
- hopefully fix asid issue

TIME ALLOWING:
- look into dtb overlays to grab hidden physical pages

next time:
fix hypervisor with state saving + DISABLE SMP TO TEST !!

6/19/24
- refactor to use kernel API for pagetable manipulation, arm32 pagetables r fucked
    - !! find article again !!
        1. arm32 pagetable overview
        2. article mentioning set_pte_ext sets fake pte
- look into amd LFU cache evict, possibly EPT hook ?



6/26/24
- start on AMD port
- find actual page size
	- modify hardware pagetables directly,
	   maybe look at bare metal OS source to touch it directly, fuck the linux nonsense

IMPORTANT: kernel must be physically contig.. possible issue here ? can only hook kernel modules


6/27/24
differentiate highmem/lowmem (1mb vs 4k pages) for page flip etc etc
set up local llm
